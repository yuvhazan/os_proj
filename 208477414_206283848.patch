diff --git a/Makefile b/Makefile
index 328f9c6..ecfd89a 100644
--- a/Makefile
+++ b/Makefile
@@ -3,6 +3,7 @@ U=user
 
 OBJS = \
   $K/entry.o \
+  $K/cas.o \
   $K/start.o \
   $K/console.o \
   $K/printf.o \
diff --git a/kernel/cas.S b/kernel/cas.S
new file mode 100644
index 0000000..bf0c16f
--- /dev/null
+++ b/kernel/cas.S
@@ -0,0 +1,15 @@
+.global cas
+
+cas:
+# a0 holds address of memory location
+# a1 holds expected value
+# a2 holds desired value
+# a0 holds return value, 0 if successful, !0 otherwise
+cas:
+lr.w t0, (a0) # Load original value.
+bne t0, a1, fail # Doesnâ€™t match, so fail.
+sc.w a0, a2, (a0) # Try to update.
+jr ra # Return.
+fail:
+li a0, 1 # Set return to failure.
+jr ra # Return.
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..1df5752 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             get_ref(void *pa);
+int             incr_ref(void *pa);
+int             decr_ref(void *pa);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -145,6 +148,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             handle_page_fault(pagetable_t pagetable, uint64 va);
 
 // uart.c
 void            uartinit(void);
@@ -167,6 +171,7 @@ void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 uint64          walkaddr(pagetable_t, uint64);
+pte_t *         walk(pagetable_t pagetable, uint64 va, int alloc);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
@@ -184,3 +189,6 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+#define NUM_PYS_PAGES ((PHYSTOP-KERNBASE) / PGSIZE)
+#define PA2IDX(x) (((uint64)x-KERNBASE) / PGSIZE)
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..8897239 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -8,9 +8,12 @@
 #include "spinlock.h"
 #include "riscv.h"
 #include "defs.h"
+#include "proc.h"
 
 void freerange(void *pa_start, void *pa_end);
 
+int refs[NUM_PYS_PAGES];
+
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
@@ -27,6 +30,7 @@ void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  memset(refs, 0, sizeof(int)*PA2IDX(PHYSTOP));
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -46,11 +50,15 @@ freerange(void *pa_start, void *pa_end)
 void
 kfree(void *pa)
 {
-  struct run *r;
+   struct run *r;
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  if (decr_ref(pa) > 0)
+    return;
+
+  refs[PA2IDX(pa)] = 0;
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -72,11 +80,32 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+
+  if(r) {
+    refs[PA2IDX(r)] = 1;
     kmem.freelist = r->next;
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int get_ref(void *pa) {
+  return refs[PA2IDX(pa)];
+}
+
+int incr_ref(void *pa) {
+  int index = PA2IDX(pa);
+  int val = refs[index];
+  while(cas(&refs[index], val, val+1));
+  return refs[index];
+}
+
+int decr_ref(void *pa) {
+  int index = PA2IDX(pa);
+  int val = refs[index];
+  while(cas(&refs[index], val, val-1));
+  return refs[index];
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..1844cee 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -15,6 +15,8 @@ struct proc *initproc;
 int nextpid = 1;
 struct spinlock pid_lock;
 
+extern uint64 cas(volatile void *addr, int expected, int newval);
+
 extern void forkret(void);
 static void freeproc(struct proc *p);
 
@@ -653,4 +655,4 @@ procdump(void)
     printf("%d %s %s", p->pid, state, p->name);
     printf("\n");
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..ce804d5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -106,3 +106,5 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+extern uint64 cas(volatile void *addr, int expected, int newval);
\ No newline at end of file
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..281de30 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 9) // copy-on-write
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..c2162f7 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,7 +65,14 @@ usertrap(void)
     intr_on();
 
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  } 
+  else if(r_scause() == 15) {
+    uint64 va = PGROUNDDOWN(r_stval()); // get va of the page that caused the fault
+    if(handle_page_fault(p->pagetable, va) != 0){
+      p->killed = 1;
+    }
+  }
+  else if((which_dev = devintr()) != 0){
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
@@ -83,6 +90,42 @@ usertrap(void)
   usertrapret();
 }
 
+// handle page faults occur on COW
+// create new page and copy old page to new page
+// install new page pte and free old one
+int
+handle_page_fault(pagetable_t pagetable, uint64 va)
+{
+  if(va >= MAXVA)
+    return -1;
+
+  pte_t *pte;
+  
+  if ((pte = walk(pagetable, va, 0)) == 0)
+    return -1;
+  
+  if ((*pte & PTE_V) == 0) // pte present
+    return -1;
+
+  if ((*pte & PTE_COW) == 0) // if pte is not cow we shouldn't create new page
+    return 1;
+
+  char *mem;
+  // allocate new page
+  if ((mem = kalloc()) != 0) {
+    uint64 pa = PTE2PA(*pte);
+    // copy old page to new page
+    memmove(mem, (char*)pa, PGSIZE);
+    // define new pte with relevant flags
+    *pte = PA2PTE(mem) | ((PTE_FLAGS(*pte) & ~PTE_COW) | PTE_W);
+    kfree((void*)pa);
+
+    return 0;
+  } else {
+    return -1;
+  }
+}
+
 //
 // return to user space
 //
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..4444e26 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -303,22 +303,24 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+    
     pa = PTE2PA(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    flags = (uint)PTE_FLAGS(*pte);
+    flags |= PTE_COW; // turn cow flag on
+    flags &= (~PTE_W); // turn off write flag
+    
+    
+    // map the parent's physical page into the child
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
       goto err;
     }
+    incr_ref((void*)pa);
   }
   return 0;
 
@@ -350,6 +352,9 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(handle_page_fault(pagetable, va0) < 0) {
+      return -1;
+    }
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
diff --git a/test.test b/test.test
deleted file mode 100644
index 975fbec..0000000
--- a/test.test
+++ /dev/null
@@ -1 +0,0 @@
-y
